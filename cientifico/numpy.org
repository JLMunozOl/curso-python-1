#+title: Herramientas del computo científico
#+author: Miguel Piña
#+date: [2016-06-21 mar 21:18]
#+setupfile: ~/proyectos/org-html-themes/setup/theme-bigblow.setup

* Objetivos

- Conocer más sobre las herramientas provistas por numpy
  para el cálculo científico.


* ¿Qué es Numpy?

Numpy es una biblioteca para realizar computo
científico a través de Python. Provee objetos de tipo
arreglo multidimensionales de alto desempeño y
herramientas para trabajar con dichos arreglos.

Si están familiarizados con Matlab, encontrarán en
Numpy una similitud para su desarrollo.


* Arreglos

Un arreglo en Numpy es una malla de valores, todos de
un mismo tipo y están indexados por una tupla de
enteros no negativos. El número de dimensiones es el
rango del arreglo.

Podemos inicializar arreglos de numpy desde listas
anidadas de Python y acceder a sus elementos usando
corchetes cuadrados.

#+begin_src python
a = np.array([1, 2, 3])
#+end_src

Los arreglos van a tener las siguiente funciones:

- ndarray.ndim :: Proporciona el número de dimensiones de
     nuestro array. El array identidad es un array
     cuadrado con una diagonal principal unitaria.

- ndarray.shape :: Devuelve la dimensión del array, es
     decir, una tupla de enteros indicando el tamaño del
     array en cada dimensión. Para una matriz de n filas y m
     columnas obtendremos (n,m).
- ndarray.size :: Es el número total de elementos del
     array.
- ndarray.dtype :: Es un objeto que describe el tipo de
     elementos del array.
- ndarray.itemsize :: devuelve el tamaño del array en
     bytes.
- ndarray.data :: El buffer contiene los elementos
     actuales del array.


* Arreglos

#+begin_src python
  import numpy as np

  a = np.array([1, 2, 3])  # Create a rank 1 array
  print(type(a))            # Prints "<type 'numpy.ndarray'>"
  print(a.shape)            # Prints "(3,)"
  print(a[0], a[1], a[2])   # Prints "1 2 3"
  a[0] = 5                 # Change an element of the array
  print(a)                  # Prints "[5, 2, 3]"

  b = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array
  print(b.shape)                     # Prints "(2, 3)"
  print(b[0, 0], b[0, 1], b[1, 0])   # Prints "1 2 4"
  print(b.ndim)
  print(b.size)
  print(b.dtype)
  print(b.itemsize)
  print(b.data)
#+end_src
* Arreglos

Como hemos mencionando anteriormente, los arrays son
unos de los elementos más utilizados por los
programadores bajo cualquier lenguaje. Este gran uso
hace que dispongamos de una gran variedad de comandos
para la creación de arrays: arrays unidimensionales,
multidimensionales, nulos, unitarios, secuenciales, de
números aleatorios, etc. Dependiendo de las necesidades
de nuestro problema escogeremos la opción más adecuada.

- identity(n,dtype) :: Devuelve la matriz identidad, es
     decir, uma matriz cuadrada nula excepto en su diagonal
     principal que es unitaria. n es el número de filas (y
     columnas) que tendrá la matriz y dtype es el tipo de
     dato. Este argumento es opcional. Si no se establece,
     se toma por defecto como flotante.
- ones(shape,dtype) :: Crea un array de unos compuesto de
     shape elementos.

- zeros(shape, dtype) :: Crea un array de ceros compuesto
     de "shape" elementos.
- empty(shape, dtype) :: Crea un array de ceros compuesto
     de “shape” elementos” sin entradas.
- eye(N, M, k, dtype) :: Crea un array bidimensional con
     unos en la diagonal k y ceros en el resto. Es similar a
     identity. Todos los argumentos son opcionales. N es el
     número de filas, M el de columnas y k es el índice de
     la diagonal. Cuando k=0 nos referimos a la diagonal
     principal y por tanto eye es similar a identity.
- arange([start,]stop[,step,],dtype=None) :: Crea un array
     con valores distanciados step entre el valor inicial
     star y el valor final stop. Si no se establece step
     python establecerá uno por defecto.
- linspace(start,stop,num,endpoint=True,retstep=False) ::
     Crea un array con valor inicial start, valor final stop
     y num elementos.
- meshgrid(x,y) :: Genera una matriz de coordenadas a
     partir de dos los arrays x, y.


#+begin_src python
  import numpy as np

  a = np.zeros((2,2))  # Create an array of all zeros
  print(a)             # Prints "[[ 0.  0.]
                       #          [ 0.  0.]]"

  b = np.ones((1,2))   # Create an array of all ones
  print(b)             # Prints "[[ 1.  1.]]"

  c = np.full((2,2), 7) # Create a constant array
  print(c)              # Prints "[[ 7.  7.]
                        #          [ 7.  7.]]"

  d = np.eye(2)        # Create a 2x2 identity matrix
  print(d)             # Prints "[[ 1.  0.]
                       #          [ 0.  1.]]"

  e = np.random.random((2,2)) # Create an array filled with random values
  print(e)                    # Might print "[[ 0.91940167  0.08143941]
                              #               [ 0.68744134  0.87236687]]"

  f = np.meshgrid(a,b)
  print(f)
#+end_src
* Arreglos

Podemos sacar secciones de matriz y ponerlos en otras variables.

#+begin_src python
  import numpy as np

  # Create the following rank 2 array with shape (3, 4)
  # [[ 1  2  3  4]
  #  [ 5  6  7  8]
  #  [ 9 10 11 12]]
  a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

  # Use slicing to pull out the subarray consisting of the first 2 rows
  # and columns 1 and 2; b is the following array of shape (2, 2):
  # [[2 3]
  #  [6 7]]
  b = a[:2, 1:3]

  print(a)
  print(b)

  # A slice of an array is a view into the same data, so modifying it
  # will modify the original array.
  print(a [0, 1])   # Prints "2"
  b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
  print(a[0, 1])   # Prints "77"
#+end_src
* Arreglos

Integer array indexing

#+begin_src python
  import numpy as np

  a = np.array([[1,2], [3, 4], [5, 6]])

  # An example of integer array indexing.
  # The returned array will have shape (3,) and
  print(a[[0, 1, 2], [0, 1, 0]])  # Prints "[1 4 5]"

  # The above example of integer array indexing is equivalent to this:
  print(np.array([a[0, 0], a[1, 1], a[2, 0]]))  # Prints "[1 4 5]"

  # When using integer array indexing, you can reuse the same
  # element from the source array:
  print(a [[0, 0], [1, 1]])  # Prints "[2 2]"

  # Equivalent to the previous integer array indexing example
  print(np.array([a[0, 1], a[0, 1]]))  # Prints "[2 2]"
#+end_src


* Arreglos

Boolean array indexing

#+begin_src python
  import numpy as np

  a = np.array([[1,2], [3, 4], [5, 6]])

  bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                      # this returns a numpy array of Booleans of the same
                      # shape as a, where each slot of bool_idx tells
                      # whether that element of a is > 2.

  print(bool_idx)      # Prints "[[False False]
                      #          [ True  True]
                      #          [ True  True]]"

  # We use boolean array indexing to construct a rank 1 array
  # consisting of the elements of a corresponding to the True values
  # of bool_idx
  print(a[bool_idx])  # Prints "[3 4 5 6]"

  # We can do all of the above in a single concise statement:
  print(a[a > 2])     # Prints "[3 4 5 6]"
#+end_src


* Arreglos

Podemos realizar operaciones como en matlab con las matrices.

#+begin_src python
  import numpy as np

  x = np.array([[1,2],[3,4]], dtype=np.float64)
  y = np.array([[5,6],[7,8]], dtype=np.float64)

  # Elementwise sum; both produce the array
  # [[ 6.0  8.0]
  #  [10.0 12.0]]
  print(x + y)
  print(np.add(x, y))

  # Elementwise difference; both produce the array
  # [[-4.0 -4.0]
  #  [-4.0 -4.0]]
  print(x - y)
  print(np.subtract(x, y))

  # Elementwise product; both produce the array
  # [[ 5.0 12.0]
  #  [21.0 32.0]]
  print(x * y)
  print(np.multiply(x, y))

  # Elementwise division; both produce the array
  # [[ 0.2         0.33333333]
  #  [ 0.42857143  0.5       ]]
  print(x / y)
  print(np.divide(x, y))

  # Elementwise square root; produces the array
  # [[ 1.          1.41421356]
  #  [ 1.73205081  2.        ]]
  print(np.sqrt(x))
#+end_src
* Arreglos

Numpy ofrece herramientas para realizar producto
punto. En el caso de los arreglos bidimensionales,
produce el producto punto la función .dot.

#+begin_src python
  import numpy as np

  x = np.array([[1,2],[3,4]])
  y = np.array([[5,6],[7,8]])

  v = np.array([9,10])
  w = np.array([11, 12])

  # Inner product of vectors; both produce 219
  print(v.dot(w))
  print(np.dot(v, w))

  # Matrix / vector product; both produce the rank 1 array [29 67]
  print(x.dot(v))
  print(np.dot(x, v))

  # Matrix / matrix product; both produce the rank 2 array
  # [[19 22]
  #  [43 50]]
  print(x.dot(y))
  print(np.dot(x, y))
#+end_src
* Arreglos

Matrices traspuestas

#+begin_src python
  import numpy as np

  x = np.array([[1,2], [3,4]])
  print(x)   # Prints "[[1 2]
             #          [3 4]]"
  print(x.T) # Prints "[[1 3]
             #          [2 4]]"

  # Note that taking the transpose of a rank 1 array does nothing:
  v = np.array([1,2,3])
  print(v)    # Prints "[1 2 3]"
  print(v.T)  # Prints "[1 2 3]"
#+end_src
* Arreglos

Numpy ofrece un mecanismo poderoso llamado
broadcasting, con el cuál podemos operar con las tuplas
de cada uno de las matrices.

#+begin_src python
  import numpy as np

  # We will add the vector v to each row of the matrix x,
  # storing the result in the matrix y
  x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
  v = np.array([1, 0, 1])
  y = np.empty_like(x)   # Create an empty matrix with the same shape as x

  # Add the vector v to each row of the matrix x with an explicit loop
  for i in range(4):
      y[i, :] = x[i, :] + v

  # Now y is the following
  # [[ 2  2  4]
  #  [ 5  5  7]
  #  [ 8  8 10]
  #  [11 11 13]]
  print(y)
#+end_src

Usando broadcasting

#+begin_src python
  import numpy as np

  # We will add the vector v to each row of the matrix x,
  # storing the result in the matrix y
  x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
  v = np.array([1, 0, 1])
  y = x + v  # Add v to each row of x using broadcasting
  print(y)  # Prints "[[ 2  2  4]
           #          [ 5  5  7]
           #          [ 8  8 10]
           #          [11 11 13]]
#+end_src

* Scipy

Scipy es un framework que permite operar con los
objetos que nos provee numpy, ofreciendo un gran número
de operaciones para operar con los arreglos de numpy y
que son útiles para diferentes tipos de aplicaciones
científicas y de ingeniería.

Para instalarlo dentro de nuestro entorno, basta con hacer

#+begin_src sh
pip install scipy
pip install pillow
#+end_src

* Scipy

Ejemplo

#+begin_src python
  from scipy.misc import imread, imsave, imresize

  # Read an JPEG image into a numpy array
  img = imread('cat.jpg')
  print(img.dtype, img.shape)  # Prints "uint8 (400, 248, 3)"

  # We can tint the image by scaling each of the color channels
  # by a different scalar constant. The image has shape (400, 248, 3);
  # we multiply it by the array [1, 0.95, 0.9] of shape (3,);
  # numpy broadcasting means that this leaves the red channel unchanged,
  # and multiplies the green and blue channels by 0.95 and 0.9
  # respectively.
  img_tinted = img * [1, 0.95, 0.9]

  # Resize the tinted image to be 300 by 300 pixels.
  img_tinted = imresize(img_tinted, (300, 300))

  # Write the tinted image back to disk
  imsave('cat_tinted.jpg', img_tinted)
#+end_src
