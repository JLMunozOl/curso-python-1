#+title: Tipos en python
#+author: Miguel Piña
#+date: [2016-06-14 mar 07:31]
#+setupfile: ~/proyectos/org-html-themes/setup/theme-bigblow.setup

* Tipos de datos primitivos

- Booleanos
- Numéricos
- Cadenas
- Listas
- Tuplas
- Conjuntos
- Diccionarios

* Tipos booleanos

En python cualquier objeto se evalua a verdadero, el
cuál se puede usar dentro de las condicionales de una
condicional *if* o un ciclo *while* (los cuales hablaremos
de ellos más adelante). Los siguiente objetos son
considerados falsos:

- None
- False
- Cero (de cualquier tipo numérico)
- Cualquier secuencia vacía ('', (), [])
- Cualquier diccionario vacío ({})

* Operaciones booleanas

Las operaciones booleanas definidas dentro de python
son las siguientes:

- not :: Negación del objeto evaluado
- and :: Evaluación Y
- or :: Evaluación Ó


- Nota :: Los dos últimos son operadores de
     corto-circuito. Es decir, para el *and*, si el
     primer operando se evalua a falso, toda la
     expresión se evalua a falso. En el caso del *or* si
     el primer operando se evalua a verdadero, toda la
     expresión se evalua a verdadero.

* Comparaciones

En python, las operaciones de comparación son
soportadas por todos los objetos. Estas operaciones son
las siguientes:

- < :: Menor qué
- <= :: Menor o igual que
- > :: Mayor qué
- >= :: Mayor o igual que
- == :: Igual a
- != :: No es igual a
- is :: Identidad del objeto
- is not :: Negación de la identidad


* Tipos numéricos

En python vamos a tener 4 tipos numéricos soportados:

- int :: Los números enteros son implementados
     simplemente usando long en C, los cuáles tienen
     una precisión de 32 bits.
- float :: Los números flotantes
- long :: Los números de tipo Long tiene precisión
     ilimitada
- complex :: Tienen una parte real y una parte
     imaginaria, los cuales para usarlos basta con
     extraerlos usando z.real y z.imag.

* Sintaxis

- Complejo :: Donde *k* es un número. Para los números
     complejos se escriben así:

#+BEGIN_CENTER
K + Pj
#+END_CENTER

Donde *K* es un número real y *P* es un número imaginario

* Operaciones

Las operaciones definidas sobre estos tipos de datos son las siguientes:

- x + y :: Suma
- x - y :: Resta
- x * y :: Multiplicación
- x / y :: División
- x // y :: División (piso)
- x % y :: Residuo
- -x :: Negación
- abs(x) :: Valor absoluto
- int(x) :: Cast a entero
- float(x) :: Cast a Float
- complex(re,im) :: Cast a número complejo
- c.conjugate() :: Conjunto del número complejo (identidad en los números reales)
- divmod(x, y) :: (x//y, x % y)
- pow(x, y) :: x elevado a la y
- x ** y :: x elevado a la y


* Cadenas

Las cadenas en python son similares a las definidas en
otros lenguajes de programación:

#+BEGIN_SRC python
cadena = "Esta es una cadena en python"
#+END_SRC

* Funciones para cadenas

Las siguientes operaciones están definidas para la
manipulación de cadenas:

- str.capitalize() :: Transforma el primer caracter a
     mayúsculas, dejando los demás caracteres en
     minúsculas.
- str.count(sub[, start[, end]]) :: Regresa el número
     de ocurrencias de la subcadena *sub* en el rango
     [ /start/, /end/ ]
- str.endswith(suffix[,start[,end]]) :: Regresa
     verdadero si la cadena termina con la subcadena
     *suffix*, en otro caso regresa falso. Con el
     argumento opcional *start*, prueba a partir de la
     posición indicada. Con el argumento opcional *end*,
     se detiene la prueba en la posición indicada.

* Funciones para cadenas

- str.find(sub, [,start[,end]]) :: Regresa el índice
     más chico donde la subcadena *sub* hace aparición
- str.format(*args, *kwargs) :: Función de formato.
- str.join(iterable) :: Regresa una cadena que
     representa la concatenación de los elementos en el
     iterador *iterable*.
- str.replace(old, new[, count]) :: Regresa una copia
     de la cadena replazando la subcadena *old* con *new*.
- str.split(sep[,maxsplit]) :: Regresa una lista de
     todas las palabras en la cadena usando *sep* como
     delimitador.

* Listas

Es una secuencia de valores encerrados entre corchetes
y separados por comas. Este tipo lo vamos a definir de
la siguiente forma:

#+BEGIN_SRC python
lista = [1, 2, 3]
#+END_SRC

Esta estructura de datos es de tamaño dinámico y puede
ser modificada en tiempo de ejecución.

* Operaciones de listas

- l.append(x) :: agrega el elemento x al final de la
     lista. Es equivalente a l[len(l):] = [x]
- l.extend(L) :: Extiende la lista *l* con los elementos
     de *L*, esto sería equivalente a l += k ó l[len(l):]
     = L
- l *= n :: Repite la lista un número /n/ de veces.
- l.count(x) :: Cuenta el número de apariciones que
     tiene el elemento *x* en *l*
- l.index(x) :: Regresa el índice de la lista donde
     aparece por primera vez *x* en *l*
- l.insert(i, x) :: Inserta *x* en la posición *i*.
- l.pop([i]) :: Sin argumento, elimina y regresa el
     último elemento de la lista. Con argumento,
     elimina y regresa el elemento en la posición *i*.
- l.remove(x) :: Elimina el primer elemento cuyo valor
     es *x*.
- l.reverse() :: Invierte de posición cada uno de los
     elementos de la lista *l*
- l.sort(key=None, reverse=False) :: Ordena los
     elementos de la lista usando un ordenamiento
     lexicográfico.

* Ejemplo de listas

#+begin_src python
# Declaramos una lista cualquiera
a = [66.25, 333, 333, 1, 1234.5]
# Imprimimos el número de apariciones de varios elementos
print(a.count(333), a.count(66.25), a.count('x'))
# Inserta 2 en la última posición
a.insert(2, -1)
# Inserta 333 al finala de la lista
a.append(333)
a
# Regresa el primer índice donde aparece 333
a.index(333)
# Elimina 333
a.remove(333)
a
# Imprime la lista en reversa
a.reverse()
a
# Ordena la lista
a.sort()
a
# Extrae el último elemento de la lista
a.pop()
a
#+end_src

* Usando listas como pilas

La implementación de varias funciones de las listas
permiten que estas sean utilizadas como pilas. Las
pilas se puede describir como una estructura LIFO
(last-in first-out). Para agregar un elemento al
principio de la lista, se usa *append()*, mientras que
para extraer, usamos *pop()* sin un índice explicito.


#+begin_src python
stack = [3, 4, 5]
stack.append(6)
stack.append(6)
stack.append(7)
stack
stack.pop()
stack
stack.pop()
stack.pop()
stack
#+end_src

* Usando listas como colas

También es posible el utilizar el uso de las listas
para que sean utilizadas como colas. Las colas se puede
describir una estructura FIFO (first-in,
first-out). Sin embargo mientras que appends y pops
realizados al final de la listas son relativamente
rápidos, hacer inserciones o extracciones desde el
principio suele ser lento (esto por qué todos los
elementos tienen que ser reacomodados).

Para implementar una cola, usen collections.deque, la
cuál fue diseñada para realizar inserciones y
eliminaciones rápidas desde ambos lados de una
lista. POr ejemplo:


#+begin_src python
from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")           # Terry arrives
queue.append("Graham")          # Graham arrives
queue.popleft()                 # The first to arrive now leaves
queue.popleft()                 # The second to arrive now leaves
queue                           # Remaining queue in order of arrival
#+end_src

* Tuplas

Similar a las listas, sólo que estas representan
secuencias inmutables. La definición de una tupla es
una secuencia separada por comas y delimitada por
paréntesis.

#+BEGIN_SRC python
tupla = (1, 2, 3)
help(tupla.count)
help(tupla.index)
#+END_SRC

* Conjuntos

Los conjuntos son colecciones desordenadas de elementos
únicos. Estas colecciones las vamos a construir de la
siguiente forma:

#+begin_src python
Set(['a','b','c'])
#+end_src

* Operaciones sobre conjuntos

- s.update(t)	s |= t
- s.intersection_update(t)	s &= t
- s.difference_update(t)	s -= t
- s.symmetric_difference_update(t)	s ^= t
- s.add(x)
- s.remove(x)
- s.discard(x)
- s.pop()
- s.clear()

* Ejemplo

#+begin_src python
engineers = set(['Juan', 'Maria', 'Jonas', 'Andres'])
programmers = set(['Jonas', 'Samuel', 'Susana', 'Andres'])
managers = set(['Maria', 'Jonas', 'Susana', 'Pedro'])
employees = engineers | programmers | managers           # union
engineering_management = engineers & managers            # intersección
fulltime_management = managers - engineers - programmers # diferencia
engineers.add('Marvin')                                  # Agrega
print(engineers)

employees.issuperset(engineers)     # prueba de superconjunto

employees.update(engineers)         # actualizando desde otro conjunto
employees.issuperset(engineers)

for group in [engineers, programmers, managers, employees]:
    group.discard('Susana')          # Eliminación incodicional
    print(group)
#+end_src

* Diccionarios

Representan mapas de objetos arbitrarios, estos mapas
siempre se componen de una llave y un valor. La forma
de representar estos objetos es la siguiente:


#+begin_src python
a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('two', 2), ('one', 1), ('three', 3)])
e = dict({'three': 3, 'one': 1, 'two': 2})
a == b == c == d == e
#+end_src

* Operaciones sobre diccionarios

- len(d)
- d[key]
- d[key] = value
- key in d
- key not in d
- iter(d)
- d.clear()
- d.get(key[, default])
- d.items()
- d.iteritems()
- d.itervalues()
- d.iterkeys()
